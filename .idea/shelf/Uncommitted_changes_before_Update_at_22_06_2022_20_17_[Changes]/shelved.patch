Index: src/MaxMinValue.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import java.util.*;\r\n\r\npublic class MaxMinValue {\r\n    public static void main(String[] args) {\r\n\r\n        Random rng = new Random();\r\n\r\n        int max, min, roll;\r\n        int[] array = new int[695000];\r\n        for (int i = 0; i < array.length; i++) {\r\n            roll = rng.nextInt(0, array.length * 10);\r\n            array[i] = roll;\r\n        }\r\n\r\n        max = mergeMax(array, 0);\r\n        min = mergeMin(array, 0);\r\n\r\n        System.out.println(Arrays.toString(array));\r\n        System.out.println(\"Highest Number: \" + max + \"\\nLowest Number: \" + min);\r\n    }\r\n\r\n    static int mergeMax(int[] array, int index) {\r\n        if (index >= array.length - 1) {\r\n            return 0;\r\n        }\r\n        int mid = array.length / 2;\r\n        int[] left = new int[mid];\r\n        int[] right = new int[array.length - mid];\r\n\r\n        int indexR = 0;\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (i < mid) {\r\n                left[i] = array[i];\r\n            } else {\r\n                right[indexR] = array[i];\r\n                indexR++;\r\n            }\r\n        }\r\n        mergeMax(left, index + 1);\r\n        mergeMax(right, index + 1);\r\n\r\n        int max = 0, checkL = 0, checkR = 0;\r\n\r\n        while (checkL < left.length) {\r\n            max = Math.max(max, left[checkL++]);\r\n        }\r\n        while (checkR < right.length) {\r\n            max = Math.max(max, right[checkR++]);\r\n        }\r\n        return max;\r\n    }\r\n\r\n    static int mergeMin(int[] array, int index) {\r\n        if (index >= array.length - 1) {\r\n            return 0;\r\n        }\r\n        int mid = array.length / 2;\r\n        int[] left = new int[mid];\r\n        int[] right = new int[array.length - mid];\r\n\r\n        int indexR = 0;\r\n        for (int i = 0; i < array.length; i++) {\r\n            if (i < mid) {\r\n                left[i] = array[i];\r\n            } else {\r\n                right[indexR] = array[i];\r\n                indexR++;\r\n            }\r\n        }\r\n        mergeMin(left, index + 1);\r\n        mergeMin(right, index + 1);\r\n\r\n        int min = 0, checkL = left.length - 1, checkR = right.length - 1;\r\n\r\n        while (checkL >= 1) {\r\n            min = Math.min(left[checkL], left[--checkL]);\r\n        }\r\n        while (checkR >= 0) {\r\n            min = Math.min(min, right[checkR--]);\r\n        }\r\n        return min;\r\n    }\r\n}\r\n//  Unhappy Solution its fast but Stack Overflow happens if the input gets too big :)\r\n//    public static int maxValue(int[] arr, int index) {\r\n//        if (index >= arr.length - 2) {\r\n//            return Math.max(arr[index], arr[index + 1]);\r\n//        }\r\n//        int max;\r\n//        max = maxValue(arr, index + 1);\r\n//\r\n//        return Math.max(arr[index], max);\r\n//        }\r\n//        public static int minValue (int[] arr, int index){\r\n//\r\n//        if (index >= arr.length - 2) {\r\n//            return Math.min(arr[index], arr[index + 1]);\r\n//        }\r\n//        int min;\r\n//        min = minValue(arr, index + 1);\r\n//\r\n//        return Math.min(arr[index], min);\r\n
===================================================================
diff --git a/src/MaxMinValue.java b/src/MaxMinValue.java
--- a/src/MaxMinValue.java	
+++ b/src/MaxMinValue.java	
@@ -1,5 +1,4 @@
 import java.util.*;
-
 public class MaxMinValue {
     public static void main(String[] args) {
 
